if [ ! "$1" ]; then
    echo "\$1 is empty, set num=20"
    num=20
else
    echo "set num=$1"
    num=$1
fi

timer_start=`date "+%Y-%m-%d %H:%M:%S"`
rm -r --interactive=never obj-aflgo

git clone https://github.com/libming/libming.git libming-CVE-2018-8807
cd libming-CVE-2018-8807/

git checkout b72cc2f # version 0.4.8

mkdir obj-aflgo; mkdir obj-aflgo/temp

export WORKDIR=/home/wenake/tmp/zenodo/DistanceMeasurement      # define workdir as where the DistanceMeasurement is
export AFLGO=$WORKDIR/aflgo-variants/aflgo-harmonic-appr      # switch to other aflgo variants here
export CC=$AFLGO/afl-clang-fast; export CXX=$AFLGO/afl-clang-fast++
export LDFLAGS=-lpthread
export ADDITIONAL="-targets=$TMP_DIR/BBtargets.txt -outdir=$TMP_DIR -flto -fuse-ld=gold -Wl,-plugin-opt=save-temps"

echo $'decompile.c:349' > $TMP_DIR/BBtargets.txt
./autogen.sh;
cd obj-aflgo; CFLAGS="-fcommon $ADDITIONAL" CXXFLAGS="$ADDITIONAL" ../configure --disable-shared --disable-freetype --prefix=`pwd`
make clean; make
cat $TMP_DIR/BBnames.txt | rev | cut -d: -f2- | rev | sort | uniq > $TMP_DIR/BBnames2.txt && mv $TMP_DIR/BBnames2.txt $TMP_DIR/BBnames.txt
cat $TMP_DIR/BBcalls.txt | sort | uniq > $TMP_DIR/BBcalls2.txt && mv $TMP_DIR/BBcalls2.txt $TMP_DIR/BBcalls.txt

cd util
# $AFLGO/scripts/genDistance.sh $SUBJECT $TMP_DIR swftophp
$AFLGO/scripts/gen_distance_fast.py $PWD $TMP_DIR swftophp --python-only
timer_mid=`date "+%Y-%m-%d %H:%M:%S"`


cd -; CFLAGS="-fcommon -distance=$TMP_DIR/distance.cfg.txt" CXXFLAGS="-distance=$TMP_DIR/distance.cfg.txt" ../configure --disable-shared --disable-freetype --prefix=`pwd`
make clean; make
mkdir in; wget -P in http://condor.depaul.edu/sjost/hci430/flash-examples/swf/bumble-bee1.swf


mkdir out
project_name=$0
for((i=0;i<$num;i++));
do
    screen_name=$"${project_name:2}-0$i"
    echo $screen_name
    screen -dmS $screen_name
    screen -x -S $screen_name -X stuff "timeout -s INT 24h $AFLGO/afl-fuzz -m none -z exp -c 21h -i in -o out/out_$i ./util/swftophp @@"
    screen -x -S $screen_name -X stuff $"\n"
done


timer_end=`date "+%Y-%m-%d %H:%M:%S"`

duration1=`echo $(($(date +%s -d "${timer_mid}") - $(date +%s -d "${timer_start}"))) | awk '{t=split("60 s 60 m 24 h 999 d",a);for(n=1;n<t;n+=2){if($1==0)break;s=$1%a[n]a[n+1]s;$1=int($1/a[n])}print s}'`
duration2=`echo $(($(date +%s -d "${timer_end}") - $(date +%s -d "${timer_mid}"))) | awk '{t=split("60 s 60 m 24 h 999 d",a);for(n=1;n<t;n+=2){if($1==0)break;s=$1%a[n]a[n+1]s;$1=int($1/a[n])}print s}'`
echo "task start at:    $timer_start"
echo "task mid at:      $timer_mid"
echo "task end at:      $timer_end"
echo "compile takes:    $duration1"
echo "fuzz takes:       $duration2"