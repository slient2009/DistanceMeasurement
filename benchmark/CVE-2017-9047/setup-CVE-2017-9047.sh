if [ ! "$1" ]; then
    echo "\$1 is empty, set num=20"
    num=20
else
    echo "set num=$1"
    num=$1
fi

timer_start=`date "+%Y-%m-%d %H:%M:%S"`

git clone https://gitlab.gnome.org/GNOME/libxml2.git libxml2_ef709ce2
cd libxml2_ef709ce2; 
git checkout ef709ce2

rm -rf obj-aflgo
mkdir obj-aflgo
mkdir obj-aflgo/temp

export COPY_CFLAGS=$CFLAGS
export COPY_CXXFLAGS=$CXXFLAGS

export AFLGO=$HOME/formal-experiments/stage2/aflgo-arithmetic-appr  # switch to other aflgo variants here
export SUBJECT=$PWD; export TMP_DIR=$PWD/obj-aflgo/temp

export CC=$AFLGO/afl-clang-fast; export CXX=$AFLGO/afl-clang-fast++
export LDFLAGS=-lpthread
export ADDITIONAL="-targets=$TMP_DIR/BBtargets.txt -outdir=$TMP_DIR -flto -fuse-ld=gold -Wl,-plugin-opt=save-temps"

echo $'valid.c:2637\nvalid.c:2638\nvalid.c:2639\nvalid.c:2640' > $TMP_DIR/BBtargets.txt


./autogen.sh; make distclean
cd obj-aflgo
CFLAGS="$ADDITIONAL" CXXFLAGS="$ADDITIONAL" ../configure --disable-shared --prefix=`pwd`
make clean
make xmllint



cat $TMP_DIR/BBnames.txt | grep -v "^$"| rev | cut -d: -f2- | rev | sort | uniq > $TMP_DIR/BBnames2.txt && mv $TMP_DIR/BBnames2.txt $TMP_DIR/BBnames.txt
cat $TMP_DIR/BBcalls.txt | grep -Ev "^[^,]*$|^([^,]*,){2,}[^,]*$"| sort | uniq > $TMP_DIR/BBcalls2.txt && mv $TMP_DIR/BBcalls2.txt $TMP_DIR/BBcalls.txt

# Generate distance ☕️
# $AFLGO/scripts/genDistance.sh is the original, but significantly slower, version
python $AFLGO/scripts/gen_distance_fast.py $SUBJECT/obj-aflgo $TMP_DIR xmllint --python-only

# # Check distance file
echo "Distance values:"
head -n5 $TMP_DIR/distance.cfg.txt
echo "..."
tail -n5 $TMP_DIR/distance.cfg.txt


export CFLAGS="$COPY_CFLAGS -distance=$TMP_DIR/distance.cfg.txt"
export CXXFLAGS="$COPY_CXXFLAGS -distance=$TMP_DIR/distance.cfg.txt"

# Clean and build subject with distance instrumentation ☕️
pushd $SUBJECT
  make clean
  ./configure --disable-shared
  make xmllint
popd

rm -r in
rm -r out
mkdir in
cp -r $SUBJECT/test/dtd* in
cp $SUBJECT/test/dtds/* in

timer_mid=`date "+%Y-%m-%d %H:%M:%S"`



mkdir out
project_name=$0
for((i=0;i<$num;i++));
do
    screen_name=$"${project_name:2}-0$i"
    echo $screen_name
    screen -dmS $screen_name
    screen -x -S $screen_name -X stuff "timeout -s INT 24h $AFLGO/afl-fuzz -S ef709ce2 -z exp -c 21h -i in -o "out/out_$i"  -t 1000+ $SUBJECT/xmllint  --valid --recover @@"
    screen -x -S $screen_name -X stuff $"\n"
done


timer_end=`date "+%Y-%m-%d %H:%M:%S"`

duration1=`echo $(($(date +%s -d "${timer_mid}") - $(date +%s -d "${timer_start}"))) | awk '{t=split("60 s 60 m 24 h 999 d",a);for(n=1;n<t;n+=2){if($1==0)break;s=$1%a[n]a[n+1]s;$1=int($1/a[n])}print s}'`
duration2=`echo $(($(date +%s -d "${timer_end}") - $(date +%s -d "${timer_mid}"))) | awk '{t=split("60 s 60 m 24 h 999 d",a);for(n=1;n<t;n+=2){if($1==0)break;s=$1%a[n]a[n+1]s;$1=int($1/a[n])}print s}'`
echo "task start at:    $timer_start"
echo "task mid at:      $timer_start"
echo "task end at:      $timer_end"

echo "compile takes:    $duration1"
echo "fuzz takes:       $duration2"